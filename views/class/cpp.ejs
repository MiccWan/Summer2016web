<!DOCTYPE html>
<html>
<head>
	<title>Summer C++</title>
	<meta charset="utf-8">
	<link rel="stylesheet" type="text/css" href="/class/cpp/assets_2/css/main.css">
	<link href='https://fonts.googleapis.com/css?family=Source+Sans+Pro:400,700italic' rel='stylesheet' type='text/css'>
	<style type="text/css">
	#jizz {
		border: 0;
		border-bottom: solid 1px #c9c9c9;
		margin: 2em 0;
	}

		#jizz.major {
			margin: 3em 0;
		}</style>
</head>
<body  id="demo" class="dark portrait big-mobile">
<header id="demo-header">
	<div class="left">
		<h2>2016 Summer</h2>

		<a href="/index" class="icon style2 fa-home" style="color:white;margin-top:2%; "><span class="label">home</span></a>
	
		
		
	</div>
	<div class="right">
		<!-- <ul class="share">

			<li class="facebook"><div class="fb-like fb_iframe_widget" data-href="http://html5up.net/phantom" data-send="false" data-layout="button" data-width="100" data-show-faces="true" fb-xfbml-state="rendered" fb-iframe-plugin-query="app_id=&amp;container_width=51&amp;href=http%3A%2F%2Fhtml5up.net%2Fphantom&amp;layout=button&amp;locale=en_US&amp;sdk=joey&amp;send=false&amp;show_faces=true&amp;width=100"><span style="vertical-align: bottom; width: 51px; height: 20px;"><iframe name="f13d5e85c655a5" width="100px" height="1000px" frameborder="0" allowtransparency="true" allowfullscreen="true" scrolling="no" title="fb:like Facebook Social Plugin" src="https://www.facebook.com/v2.0/plugins/like.php?app_id=&amp;channel=https%3A%2F%2Fstaticxx.facebook.com%2Fconnect%2Fxd_arbiter%2Fr%2Fbz-D0tzmBsw.js%3Fversion%3D42%23cb%3Df122154e97496e4%26domain%3Dhtml5up.net%26origin%3Dhttps%253A%252F%252Fhtml5up.net%252Ff2e57bd0d6391e4%26relation%3Dparent.parent&amp;container_width=51&amp;href=http%3A%2F%2Fhtml5up.net%2Fphantom&amp;layout=button&amp;locale=en_US&amp;sdk=joey&amp;send=false&amp;show_faces=true&amp;width=100" style="border: none; visibility: visible; width: 51px; height: 20px;" class=""></iframe></span></div></li>
			<li></li>

			
		</ul> -->

		<a href="/class/<%=inforClass.name%>" class="button back alt2" id="nav_bot">Book</a>
		<a href="/class/<%=inforClass.name%>/note" class="button back alt2" id="nav_bot">Note</a>
		<a href="/class/<%=inforClass.name%>/judge" class="button back alt2" id="nav_bot">Judge</a>
		<a href="/profile" class="button back alt2" id="nav_bot">Profile</a>
		
	</div>
</header>
<header id="header">
	<div class="inner">
			<nav>
				<ul>
					<li><a href="#menu">Menu</a></li>
				</ul>
			</nav>
	</div>
</header>
<nav id="menu">
	<h2><%= realClassName[inforClass.name] %></h2>
	<ul>
		<!-- <li><a href="/">Home</a></li>
		<hr id='jizz'> -->
		<li><a href="#c1">1. C++ 的簡介</a></li>
		<li><a href="#c2">2. 第一個C++ 程式開發</a></li>
		<li><a href="#c3">3. 資料型態 Data Type</a></li>
		<li><a href="#c4">4. 輸入輸出 Input/Output</a></li>
		<li><a href="#c5">5. 運算子 operator</a></li>
		<li><a href="#c6">6. 條件敘述 if 和 switch</a></li>
		<li><a href="#c7">7. 迴圈 Loop</a></li>
		<li><a href="#c8">8. 陣列 Array</a></li>
		<!--  -->
	</ul>
</nav>
	<h1 style="text-align: center;" class="title"><img src="/class/cpp/art/logo.svg" width="40" height="40"> C++</h1>
	<h2 style="text-align: center;">by INFOR 29th 霸霸</h2>

	<hr>
	<section>
		<h2 id='c1'>C++ 的簡介</h2>
		<p style="padding-left: 50px" class="left-line">在 1980 年時，Bjarne Stroustrup 博士創造出了強化 C 語言的程式語言。一開始它被叫做「C with Classes」，之後被添加了各種功能後，它就叫做 C++ 了。就目前學習 C++ 來說，它可以獨立於 C，同時它也是建中高一大部分資訊課教的程式語言。</p>
		<br>
		<h2 id='c2'>第一個C++ 程式開發</h2>
	
		<p style="padding-left: 50px" class="no-line">1.	開啟IDE（整合開發環境，我們用的是Code::Blocks）</p>
		<p style="padding-left: 50px" class="no-line">2.	開新檔案，記得儲存的時候副檔名要設成 .cpp 喔</p>
		<img src="/class/cpp/image/image001.jpg" style="padding-left: 150px" >
		<p></p>
		<p style="padding-left: 50px" class="no-line">3.	把這一段程式碼打上去：</p>
		<img src="/class/cpp/image/image002.png" style="padding-left: 150px">
		<p></p>
		<p style="padding-left: 150px" class="no-line">一個 C++ 程式最少會包含一個函式，而且一定有個 main函式。它是程式的主體，程式執行的時候就會一一執行裡面的敘述。</p>
		<p style="padding-left: 50px" class="no-line">4.	編譯並執行</p>
		<img src="/class/cpp/image/image003.jpg" style="padding-left: 150px">
		<p></p>
		<p style="padding-left: 150px" class="no-line">如果不想用 IDE，其實用文字編輯器（推 sublime）撰寫程式，再直接用 gcc (C) 或 g++(C 或 C++) 編譯也是可以的。</p>
		<p></p>
		
	

	</section>
		<hr>	
		<p></p>
	<section>
		<h2>在剛剛寫的程式裡……</h2>
		<p  style="padding-left: 50px" class="left-line">剛才的程式中，第一句是 #include &lt iostream &gt,<br>它的意思可以解釋成「讀取函式庫 <iostream> 的內容」。概念就如 Python 裡的 import 一樣，函式庫裡裝滿許多好用的函式，<iostream> 就有 cin、cout 分別用來處理輸入和輸出。 <br>接下來的 using namespace std; 指的是使用叫做 std 的名稱空間，如果不打的話，之後的 cin、cout 都要改寫為 std::cin、std::cout了。至於名稱空間是什麼，就問問其他講師囉。 <br>最後的 return 0; 顧名思義就是傳回整數 0（只打這句就什麼都沒有），其實可有可無，但由於是 main 函式的關係（因為 main 前面寫個int，所以應該傳回一個整數），有傳回值會比較完整。</p>
		
		<p></p>
	</section>
	
	<hr>
	<p></p>

	<section>
		<h2>敘述句 statement</h2>
		<p style="padding-left: 50px" class="left-line">在上面的程式中，return 0;cout << “Hello, world” << endl; 都是敘述句。每個敘述句都會以分號 ; 作為結尾，而敘述句就是程式執行的單位。如果只有 ; 的話就叫做空敘述。</p>
		<p></p>
	</section>

	<hr>
	<p></p>

	<section>
		<h2>註解 comment</h2>
		<p style="padding-left: 50px" class="left-line">簡單來說，就是程式不會執行，但是幫助你閱讀的文字。C++ 的註解寫法有兩種：
第一種是在文字前面加上「//」，這種只能有一行。例如
</p>
		<pre><code>
cout << “迎楓舞建”; //這是輸出
		</code></pre>
		<p style="padding-left: 50px" class="left-line">第二種是在註解的前後分別加上/* */，這種註解可以跨行，不過不能一個包一個。例如</p>
		<pre><code>
cout << “迎楓舞建”; /*這是
輸出*/
		</code></pre>
		<p></p>
	</section>

	<hr>
	<p></p>

	<section>
		<h2>縮排 indent</h2>
		<p style="padding-left: 50px" class="left-line">原則上，把一開始寫的程式中用 {} 包起來兩句前面的空白全刪掉，對程式的編譯沒有影響。不過，有縮排的習慣可以幫助以後的閱讀。通常用 {} 包起來的敘述，會比上一層縮排一個 tab鍵，不過 Code::Blocks 全部幫你排好了。</p>
		<p></p>
	</section>

	<hr>
	<p></p>

	<section>
		<h2>變數宣告</h2>
		<p style="padding-left: 50px" class="left-line">其實 C++ 真的和 Java 很像，除了變數宣告，運算子也根本一樣啊。
宣告的方法如下：
</p>	
		<pre><code>
（修飾詞） 資料型態 變數名稱 ;
		</code></pre>
		<p style="padding-left: 50px" class="left-line">如果一次要宣告很多變數，不同變數名稱間要用 , 隔開。</p>
		<p></p>
	</section>

	<hr>
	<p></p>

	<section>
		<h2 id='c3'>資料型態 Data Type</h2>
		<table style=" width:60%;transform:translateX(50px);;height:40%" >
			<tr>
				<th>資料型態</th>
				<th>解釋</th>
				<th>例子</th>
				<th>備註</th>
			</tr>
			<tr>
				<td>bool</td>
				<td>布林值</td>
				<td>Ex: 0(False), 1(True)</td>
				<td>只有 0、1</td>
			</tr>
			<tr>
				<td>int</td>
				<td>整數</td>
				<td>Ex: 48763</td>
				<td>-2^31 ~ 2^31-1（同long int）</td>
			</tr>
			<tr>
				<td>double</td>
				<td>倍精度浮點數</td>
				<td>Ex: 1.1</td>
				<td>約10-308 ~ 10308（有效15位）</td>
			</tr>
			<tr>
				<td>char</td>
				<td>字元</td>
				<td>Ex: ‘s’、’%’、’\n’</td>
				<td>0 ~ 255（ASCII）</td>
			</tr>
			<tr>
				<td>string</td>
				<td>字串</td>
				<td>Ex: “Hello, World”、”C87”</td>
				<td>記得 #include &ltcstring&gt</td>
			</tr>
			<tr>
				<td>long long int</td>
				<td>整數</td>
				<td>Ex: 214748364700</td>
				<td>-2^63 ~ 2^63-1（可寫long long）</td>
			</tr>
			<tr>
				<td>short</td>
				<td>整數</td>
				<td>Ex: 1000</td>
				<td>-2^15 ~ 2^15-1</td>
			</tr>
			<tr>
				<td>float</td>
				<td>單精度浮點數</td>
				<td>Ex: 1.1</td>
				<td>約10^-38 ~ 10^38（有效7位）</td>
			</tr>
		</table>
		<p></p>
		<p style="padding-left: 50px" class="left-line">好吧，感覺就很噁心，不過注意一下上面的 ASCII。
電腦看得懂的就只有 0 和 1，因此，要把我們人類看得懂的文字編碼成數字，經過電腦運算後，再轉換成文字才行。因為當初的編碼方法太多了，1967 年美國國家標準局就制定了一套標準，就是現在的 ASCII囉。以下是 7-bit ASCII的表：
例如打上 ‘e’–‘a’，傳回的值就會是4
</p>
		<img src="/class/cpp/image/image004.png" style="padding-left: 50px" >
		<p></p>
	</section>
	<hr>
	<p></p>

	<section>
		<h2>修飾詞 qualifier</h2>
		
		<p style="padding-left: 50px">unsigned（只有正的，比如 unsigned int 的範圍 0 ~ 232-1）、short、long、const（不能修改，只能被提取的常數) <br>

		 </p>

	</section>

	<hr>

	<section>
		<h2>變數名稱</h2><p style="padding-left: 50px">以大小字母為主，再加上數字、底線、金錢符號 $，不過不能以數字作為開頭。除此之外，關鍵字（具有語法功能的保留字）不能使用。</p>
	</section>

	<hr>

	<section>
		<h2>初始化 / 指定值 Assign</h2>
		<p style="padding-left: 50px">我們可以用賦值運算子 = 在宣告變數的時候，就給它一個值。例如：</p>
		<pre><code>
int yee = 1;
char x = ‘f’;
string s = “迎楓舞建”;
		</code></pre>
		<br>
	</section>

	<hr>
	<p></p>

	<section>
		<h2 id='c4'>輸入輸出 Input/Output</h2>
		<p style="padding-left: 50px" class="left-line" >第一個程式裡面有講到 <iostream>，其實裡面就是 C++ 提供的標準輸入輸出工具。 <br>cin 的功能是用鍵盤輸入資料，用法是 cin >> 變數 ; <br>cout 的功能則是輸出資料，用法是 cout << 要輸出的東東 ;<br>有時我們要連續輸入輸出很多資料，這時可以把 << 或 >> 串接起來，例如：</p>
		<pre><code>
int v1, v2;
cin >> v1 >> v2;
cout << vi << ‘ ‘ << v2 << endl;

		</code></pre>
		<p style="padding-left: 50px" class="left-line">連續輸入變數的時候，不同變數之間用空白隔開也可以，因為抽取運算子 >> 會把空白字元、換行字元等等視為結束。例如上面的程式執行的時候，可以輸入「2空白3」，這樣的話 v1 會是 2，v2 會是 3。
如果要輸出空白，可以用 ' '，換行則可以用換行字元 '\n' 或 endl。
</p><br>
		<p  style="padding-left: 50px" class="left-line">不過，在 C語言裡，還有更快更好用的輸入輸出方法。這裡會介紹 printf、scanf，記得引入標頭檔 <stdio.h>。（其實和 Java 差不多）
printf() 用法是 printf(“格式”, 變數1, 變數2……);
scanf() 用法是 scanf(“格式”, &變數1, &變數2……);
例如：
</p><br>
		<pre><code>
int y, m, d;
scanf("%d/%d/%d", &y, &m, &d);
printf("Year:%d\nMonth:%d\nDay:%d\n", y, m, d);
		</code></pre>
		<p style="padding-left: 50px">會產生:</p>
		<img src="/class/cpp/image/image005.jpg" style="padding-left: 50px" >
		<p style="padding-left: 50px">其中的 %d 叫做格式指定字 (format specifier)，是指定整數、浮點數、字元等等顯示用的，有以下幾種：</p>

		<table  style=" width:50%;transform:translateX(50px);height:40%" >
			<tr>
				<td>%d 或 %i</td>
				<td style="padding-left:50px">10進制整數</td>
			</tr>
			<tr>
				<td>%u</td>
				<td style="padding-left:50px">10進制無號數</td>
			</tr>
			<tr>
				<td>%o</td>
				<td style="padding-left:50px">8進制無號數</td>
			</tr>
			<tr>
				<td>%x</td>
				<td style="padding-left:50px">16進制無號數（小寫）</td>
			</tr>
			<tr>
				<td>%X</td>
				<td style="padding-left:50px">16進制無號數（大寫）</td>
			</tr>
			<tr>
				<td>%f</td>
				<td style="padding-left:50px">單精度浮點數</td>
			</tr>
			<tr>
				<td>%lf</td>
				<td style="padding-left:50px">倍精度浮點數</td>
			</tr>
			<tr>
				<td>%e 或 %E</td>
				<td style="padding-left:50px">用科學記號表示</td>
			</tr>
			<tr>
				<td>%c</td>
				<td style="padding-left:50px">字元</td>
			</tr>
			<tr>
				<td>%s</td>
				<td style="padding-left:50px">字元陣列（不適合用 string）</td>
			</tr>
			
		</table>
	</section>

	<p></p>
	<hr>
	<p></p>

	<section>
		<h2 id='c5'>運算子 operator</h2>
		<p style="padding-left: 50px"  class="left-line">什麼是運算子呢？其實，平常寫的加 (+) 減 (-) 乘 (*) 除 (/) 就是，而電腦為了處理運算，還有很多其他的運算子，例如前面講的賦值運算子 (=)。
算術運算子
</p>

		<table   style=" width:50%;transform:translateX(50px);height:40%" >
			<tr>
				<th>符號</th>
				<th>意義</th>
				<th>例子</th>
			</tr>
			<tr>
				<td>-</td>
				<td>相反數</td>
				<td>-a</td>
			</tr>
			<tr>
				<td>%</td>
				<td>取餘數(模，mod)</td>
				<td>a%b（只有整數喔</td>
			</tr>
			<tr>
				<td>++</td>
				<td>遞增(加上1)</td>
				<td>a++ 或 ++a</td>
			</tr>
			<tr>
				<td>--</td>
				<td>遞減(減掉1)</td>
				<td>a-- 或 –-a</td>
			</tr>
			<tr>
				<td>+=</td>
				<td>以加法賦值</td>
				<td>a+=b</td>
			</tr>
			<tr>
				<td>-=</td>
				<td>以減法賦值</td>
				<td>a-=b</td>
			</tr>
			<tr>
				<td>*=</td>
				<td>以乘法賦值</td>
				<td>a*=b</td>
			</tr>
			<tr>
				<td>/=</td>
				<td>以除法賦值</td>
				<td>a/=b</td>
			</tr>
			<tr>
				<td>%=</td>
				<td>以餘數賦值</td>
				<td>a%=b</td>
			</tr>
		</table>

		<p></p>
	</section>

	<hr>
	<p></p>

	<section>
		<h2>關係、邏輯運算子</h2>
		<table style=" width:50%;transform:translateX(50px);height:40%" >
			<tr>
				<th>符號</th>
				<th>意義</th>
				<th>例子</th>
			</tr>

			<tr>
				<td>==</td>
				<td>判斷是否相等</td>
				<td>a==b</td>
			</tr>
			<tr>
				<td>!=</td>
				<td>判斷是否不相等</td>
				<td>a!=b</td>
			</tr>
			<tr>
				<td>></td>
				<td>判斷是否大於</td>
				<td>a>b</td>
			</tr>
			<tr>
				<td>>=</td>
				<td>判斷是否大於等於</td>
				<td>a>=b</td>
			</tr>
			<tr>
				<td><</td>
				<td>判斷是否小於</td>
				<td> a < b </td>
			</tr>
			<tr>
				<td><=</td>
				<td>判斷是否小於等於</td>
				<td>a<=b</td>
			</tr>
			<tr>
				<td>! 或 not</td>
				<td>取相反</td>
				<td>!a</td>
			</tr>
			<tr>
				<td>&& 或 and</td>
				<td>邏輯AND</td>
				<td>a&&b</td>
			</tr>
			<tr>
				<td>|| 或 or</td>
				<td>邏輯OR</td>
				<td>a||b</td>
			</tr>
		</table>
		<p></p>

	</section>

	<hr>
	<p></p>

	<section>
		<h2 id='c6'>條件敘述 if 和 switch</h2>
		<p style="padding-left: 50px">if</p>
		<pre><code>
if(條件式)
    敘述;
		</code></pre>
		<p style="padding-left: 50px">或是</p>
		<pre><code>
if(條件式){
    敘述1;
    敘述2;
    ……
}
		</code></pre>

		<p style="padding-left: 50px" class="left-line">如果條件式成立的話，才會執行裡面的敘述。不過條件式不一定要是判斷敘述，使用數值也可以。事實上，判斷句會產生一個布林值0 (False) 或 1 (True)，而程式再根據數值執行，如果是0以外的數字通通會被視為True。</p>
		<p style="padding-left: 50px">if...else</p>
		<pre><code>
if(條件式){……
}
else{……
}
		</code></pre>
		<p style="padding-left: 50px">如果條件式成立的話，會執行第一個 {} 內的敘述，否則執行第二個。</p>
		<p style="padding-left: 50px" class="left-line">雖然只有一行的話，可以不用大括弧 {} 包起來，但還是習慣包起來會比較好。之後會學到的迴圈也是如此。用大括弧 {} 包起來的區域稱為區塊（Block），會被程式當做單一敘述句。除此之外，一堆 if…else 是可以串起來的，例如：</p>
		<pre><code>
int n = 10;
if(n%3 == 0){
    cout << “n = 3k” << endl;
}
else if(n%3 == 1){
cout << “n = 3k+1” << endl;
}
else{
    cout << “n = 3k+2” << endl;
}

		</code></pre>
		<br>
		<p style="padding-left: 50px">另外，{} 裡面是可以再加上 if 的，例如：</p>
		<pre><code>
int year = 2016;
if(year%4 == 0){
    if(year%100 == 0){
        if(year%400 == 0){
cout << “是閏年” << endl;
}
else{
cout << “不是閏年” << endl;
}
}
else{
    cout << “是閏年” << endl;
}
}
else{
    cout << “不是閏年” << endl;
}
		</code></pre>
		<p style="padding-left: 50px">switch（可能是你一生用過的唯一一次） 	<br>寫法： </p>
		<pre><code>
switch(數值或運算式){
    case 數字或字元1:
        敘述1;
        break;
    case 數字或字元2:
        敘述2;
        break;
    ……
    default:
        敘述;
}
		</code></pre>
		<p style="padding-left: 50px" class="left-line">其中「case 數字:」等後面用 : 結尾的標記是標籤（label），程式會根據小括號裡的整數，找到適合的標籤，執行裡面的敘述。如果都沒有，程式則會跑到default，沒有 default 就會跳出 switch。而 break; 則會使程式跳出switch，如果刪掉的話會連下面標籤的敘述一起執行。
例如：
</p>
		<pre><code>
int month = 7;
switch(month/4){
    case 0:
        cout << "spring" << endl;
        break;
    case 1:
        cout << "summer" << endl;
        break;
    case 2:
        cout << "autumn" << endl;
        break;
    case 3:
        cout << "winter" << endl;
        break;
    default:
        cout << "error" << endl;
}
		</code></pre>
		<p></p>


	</section>
	<hr>
	<p></p>

	<section>
		<h2 id='c7'>迴圈 Loop</h2>
		<p style="padding-left: 50px">需要重複執行某些敘述的時候，就需要迴圈啦。 <br><br>
while迴圈
</p>
		<pre><code>
while(數值或條件式){
    敘述句;
}
		</code></pre>
		<p style="padding-left: 50px">和 if 一樣，當數值是非 0 的值會繼續執行，否則會跳出。 <br>
例如：
</p>
		<pre><code>
int i = 0;
while(i < 10){
    cout << "^_^ ";
    i++;
}
		</code></pre>
		<p style="padding-left: 50px">do……while （和 switch 一樣也很少用）</p>
		<pre><code>
do{
    敘述句;
}while(數值或條件式); //分號很容易忘記寫啊
		</code></pre>
		<p style="padding-left: 50px">和 while 最大的差別在於，do…while 至少會執行一次再判斷條件式的真假。</p>

		<br>
		<hr>
		<p style="padding-left: 50px">for 迴圈</p>
		<pre><code>
for(起始值; 條件式; 更新值){
    敘述句;
}
		</code></pre>
		<p style="padding-left: 50px">有點像「計數器」的概念，很適合用來執行確切知道多少次的敘述。執行順序如下：</p>
		<p style="padding-left: 100px">1.	起始值：通常會宣告一個新的變數或是指定值給變數，類似「計數器」，只有剛進迴圈的時候會執行。</p>
		<p style="padding-left: 100px">2.	條件式：如果為假就會跳出迴圈。</p>
		<p style="padding-left: 100px">3.	執行大括弧 {} 中的敘述。</p>
		<p style="padding-left: 100px">4.	更新值：改變當做「計數器」的變數，通常會遞增或遞減。</p>
		<p style="padding-left: 100px">5.	回到步驟2重新執行。</p>
		<br>
		<p style="padding-left: 50px">例如改寫剛剛的例子：</p>
		<pre><code>
for(int i = 0; i < 10; i++){
    cout << "^_^ ";
}
		</code></pre>
		<br>
		<hr>
		<p style="padding-left: 50px">其他可以控制迴圈的敘述:</p>
		<br>
		<p style="padding-left: 50px"><b>break敘述</b></p>
		<p style="padding-left: 100px">在 switch 裡面出現過，一樣是用來跳出迴圈的。</p>
		<p style="padding-left: 50px"><b>continue 敘述</b></p>
		<p style="padding-left: 100px">在 while 和 do……while 裡面，遇到 continue; 時會跳過其之後的敘述繼續執行下一輪。在 for 中還會更新控制迴圈的值。</p>
		<p style="padding-left: 50px"><b>goto敘述</b></p>
		<p style="padding-left: 100px">用法：</p>
		<pre style="padding-left: 100px"><code>
goto 標籤名稱;
		</code></pre>
		<p style="padding-left: 100px">會跳到標籤所在的地方，其實在程式的任何地方都可以使用。</p>
		<br>
		<hr>
		<br><br>
		<p style="padding-left: 50px" class="left-line">在迴圈裡面，有個不成文的規定，就是控制迴圈的變數習慣從 i 開始。據說，是因為早期的程式語言 FORTRAN，只有名稱第一個字元是 I ~ N 的變數會被視為整數。
除此之外，迴圈也可以巢狀出現呢 <br>例如用 * 輸出直角三角形（不知道為什麼每本書都用這個範例）：
</p>	
		<pre><code>
for(int i = 0; i < 10; i++){
    for(int j = 0; j <= i; j++){
        cout << '*';
    }
    cout << endl;
}
		</code></pre>
		


	</section>
	<br>
	<hr>
	<br>
	<section>
		<h2 id='c8'>陣列 Array</h2>
		<p style="padding-left: 50px" class="left-line" >當你需要100個變數的時候，難道真的要宣告100次嗎？因此，電腦科學家就發明了陣列，來儲存性質相同的資料。每個陣列元素都可以當做變數，並且占用連續的記憶體空間（去煩Java講師吧）。 <br>宣告方式：
</p>

		<pre><code>
資料型態 陣列名稱[元素個數];
		</code></pre>
		<p style="padding-left: 50px">例如:</p>
		<pre><code>
int num[6]; //宣告資料型態為 int，名稱為 num，長度為6的陣列。
		</code></pre>
		<p style="padding-left: 50px">會產生:</p>
		<table style="width:50%;transform:translateX(50px);height:40%">
			<tr>
				<td>num[0]</td>
				<td>num[1]</td>
				<td>num[2]</td>
				<td>num[3]</td>
				<td>num[4]</td>
				<td>num[5]</td>
			</tr>
		</table>
		<p style="padding-left: 50px" class="left-line">要注意的是，陣列的索引值（index，就是中括號 [] 裡的數字）是從 0 到元素個數-1，要使用元素的話只要打 陣列名稱[索引值]，就和普通的變數一樣。</p>
		<br>
		<hr>
		<br>
		<p style="padding-left: 50px"><b>陣列的初始化 </b><br> <br>
當然，你可以一個一個去改變陣列中元素的值，比如讓 num 裡的每個值變成 0：
</p>
		<pre><code>
int num[6];
for(int i = 0; i < 6; i++){
    num[i] = 0;
}
		</code></pre>
		<p style="padding-left: 50px">也可以</p>
		<pre><code>
int num[6] = {0, 0, 0, 0, 0, 0};
		</code></pre>
		<p style="padding-left: 50px">或</p>
		<pre><code>
int num[6] = {0};
		</code></pre>


	</section>
	<br>
	<br>
	<hr>
	<script src="/class/cpp/assets_2/js/jquery.min.js"></script>
			<script src="/class/cpp/assets_2/js/jquery.scrollex.min.js"></script>
			<script src="/class/cpp/assets_2/js/jquery.scrolly.min.js"></script>
			<script src="/class/cpp/assets_2/js/skel.min.js"></script>
			<script src="/class/cpp/assets_2/js/util.js"></script>
			<!--[if lte IE 8]><script src="assets/js/ie/respond.min.js"></script><![endif]-->
			<script src="/class/cpp/assets_2/js/main.js"></script>
</body>
		<p style="padding-left: 50px"></p>

</html>